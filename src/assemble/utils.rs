pub fn jong_maybe_joined(cho1: &char, cho2: &char) -> Option<char> {
    match (cho1, cho2) {
        /*
        ['ㄱ', 'ㅅ', 'ㄳ'],
        ['ㄴ', 'ㅈ', 'ㄵ'],
        ['ㄴ', 'ㅎ', 'ㄶ'],
        ['ㄹ', 'ㄱ', 'ㄺ'],
        ['ㄹ', 'ㅁ', 'ㄻ'],
        ['ㄹ', 'ㅂ', 'ㄼ'],
        ['ㄹ', 'ㅅ', 'ㄽ'],
        ['ㄹ', 'ㅌ', 'ㄾ'],
        ['ㄹ', 'ㅍ', 'ㄿ'],
        ['ㄹ', 'ㅎ', 'ㅀ'],
        ['ㅂ', 'ㅅ', 'ㅄ'] */
        ('ㄱ', 'ㅅ') => Some('ㄳ'),
        ('ㄴ', 'ㅈ') => Some('ㄵ'),
        ('ㄴ', 'ㅎ') => Some('ㄶ'),
        ('ㄹ', 'ㄱ') => Some('ㄺ'),
        ('ㄹ', 'ㅁ') => Some('ㄻ'),
        ('ㄹ', 'ㅂ') => Some('ㄼ'),
        ('ㄹ', 'ㅅ') => Some('ㄽ'),
        ('ㄹ', 'ㅌ') => Some('ㄾ'),
        ('ㄹ', 'ㅍ') => Some('ㄿ'),
        ('ㄹ', 'ㅎ') => Some('ㅀ'),
        ('ㅂ', 'ㅅ') => Some('ㅄ'),
        _ => None,
    }
}

pub fn jung_maybe_joined(jung1: &char, jung2: &char) -> Option<char> {
    match (jung1, jung2) {
        ('ㅗ', 'ㅏ') => Some('ㅘ'),
        ('ㅗ', 'ㅐ') => Some('ㅙ'),
        ('ㅗ', 'ㅣ') => Some('ㅚ'),
        ('ㅜ', 'ㅓ') => Some('ㅝ'),
        ('ㅜ', 'ㅔ') => Some('ㅞ'),
        ('ㅜ', 'ㅣ') => Some('ㅟ'),
        ('ㅡ', 'ㅣ') => Some('ㅢ'),
        _ => None,
    }
}
